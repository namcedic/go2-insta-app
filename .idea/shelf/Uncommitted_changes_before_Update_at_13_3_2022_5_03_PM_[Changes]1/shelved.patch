Index: modules/comment/commentbiz/delete_comment.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package commentbiz\r\n\r\nimport (\r\n\t\"context\"\r\n\t\"instago2/common\"\r\n\t\"instago2/modules/comment/commentmodel\"\r\n\t\"instago2/pubsub\"\r\n)\r\n\r\ntype DeleteCommentStore interface {\r\n\tFindDataByCondition(\r\n\t\tctx context.Context,\r\n\t\tdata *commentmodel.CommentDelete,\r\n\t\tmoreKeys ...string,\r\n\t) (*commentmodel.Comment, error)\r\n\tSoftDeleteData(\r\n\t\tctx context.Context,\r\n\t\tid int,\r\n\t) error\r\n}\r\n\r\ntype deleteCommentBiz struct {\r\n\tstore  DeleteCommentStore\r\n\tpubsub pubsub.Pubsub\r\n}\r\n\r\nfunc NewDeleteCommentBiz(store DeleteCommentStore, pubsub pubsub.Pubsub) *deleteCommentBiz {\r\n\treturn &deleteCommentBiz{store: store, pubsub: pubsub}\r\n}\r\n\r\nfunc (biz *deleteCommentBiz) DeleteComment(ctx context.Context, data *commentmodel.CommentDelete) error {\r\n\toldData, err := biz.store.FindDataByCondition(ctx, data)\r\n\r\n\tif err != nil {\r\n\t\treturn common.ErrCannotGetEntity(commentmodel.EntityName, err)\r\n\t}\r\n\r\n\tif oldData.Status == 0 {\r\n\t\treturn common.ErrEntityDeleted(commentmodel.EntityName, nil)\r\n\t}\r\n\r\n\tif err := biz.store.SoftDeleteData(ctx, data.CommentId); err != nil {\r\n\t\treturn common.ErrCannotDeleteEntity(commentmodel.EntityName, err)\r\n\t}\r\n\r\n\treturn nil\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/modules/comment/commentbiz/delete_comment.go b/modules/comment/commentbiz/delete_comment.go
--- a/modules/comment/commentbiz/delete_comment.go	
+++ b/modules/comment/commentbiz/delete_comment.go	
@@ -39,6 +39,8 @@
 		return common.ErrEntityDeleted(commentmodel.EntityName, nil)
 	}
 
+	biz.pubsub.Publish(ctx, common.TopicDeleteComment, pubsub.NewMessage(data))
+
 	if err := biz.store.SoftDeleteData(ctx, data.CommentId); err != nil {
 		return common.ErrCannotDeleteEntity(commentmodel.EntityName, err)
 	}
Index: modules/comment/transport/gincomment/delete_comment.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package gincomment\r\n\r\nimport (\r\n\t\"github.com/gin-gonic/gin\"\r\n\t\"instago2/common\"\r\n\t\"instago2/component\"\r\n\t\"instago2/modules/comment/commentbiz\"\r\n\t\"instago2/modules/comment/commentmodel\"\r\n\t\"instago2/modules/comment/commentstorage\"\r\n\t\"net/http\"\r\n)\r\n\r\n// DeleteComment godoc\r\n// @Summary      Delete a comment\r\n// @Description  Delete a comment by comment ID\r\n// @Tags         comments\r\n// @Accept       json\r\n// @Param Authorization header string true \"Insert your access token\" default(Bearer <Add access token here>)\r\n// @Param        id   path      string  true \"id of the comment that user want to delete (encoded in uuid)\"\r\n// @Success      200  {object}  common.successRes\r\n// @Failure      400  {object}  common.AppError\r\n// @Failure      404  {object}  common.AppError\r\n// @Failure      500  {object}  common.AppError\r\n// @Router       /comments/{id} [delete]\r\nfunc DeleteComment(appCtx component.AppContext) gin.HandlerFunc {\r\n\treturn func(c *gin.Context) {\r\n\t\tuid, err := common.FromBase58(c.Param(\"id\"))\r\n\r\n\t\tif err != nil {\r\n\t\t\tpanic(common.ErrInvalidRequest(err))\r\n\t\t}\r\n\t\trequester := c.MustGet(common.CurrentUser).(common.Requester)\r\n\t\tdata := commentmodel.CommentDelete{\r\n\t\t\tCommentId: int(uid.GetLocalID()),\r\n\t\t\tUserId:    requester.GetUserId(),\r\n\t\t}\r\n\t\tstore := commentstorage.NewSQLStore(appCtx.GetMainDBConnection())\r\n\t\tbiz := commentbiz.NewDeleteCommentBiz(store, appCtx.GetPubsub())\r\n\r\n\t\tif err := biz.DeleteComment(c.Request.Context(), &data); err != nil {\r\n\t\t\tpanic(err)\r\n\t\t}\r\n\r\n\t\tc.JSON(http.StatusOK, common.SimpleSuccessResponse(true))\r\n\t}\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/modules/comment/transport/gincomment/delete_comment.go b/modules/comment/transport/gincomment/delete_comment.go
--- a/modules/comment/transport/gincomment/delete_comment.go	
+++ b/modules/comment/transport/gincomment/delete_comment.go	
@@ -17,14 +17,16 @@
 // @Accept       json
 // @Param Authorization header string true "Insert your access token" default(Bearer <Add access token here>)
 // @Param        id   path      string  true "id of the comment that user want to delete (encoded in uuid)"
+// @Param        post_id   path      string  true "post_id of the comment that user want to delete (encoded in uuid)"
 // @Success      200  {object}  common.successRes
 // @Failure      400  {object}  common.AppError
 // @Failure      404  {object}  common.AppError
 // @Failure      500  {object}  common.AppError
-// @Router       /comments/{id} [delete]
+// @Router       /comments/{id}/{post_id} [delete]
 func DeleteComment(appCtx component.AppContext) gin.HandlerFunc {
 	return func(c *gin.Context) {
 		uid, err := common.FromBase58(c.Param("id"))
+		pid, err := common.FromBase58(c.Param("post_id"))
 
 		if err != nil {
 			panic(common.ErrInvalidRequest(err))
@@ -32,6 +34,7 @@
 		requester := c.MustGet(common.CurrentUser).(common.Requester)
 		data := commentmodel.CommentDelete{
 			CommentId: int(uid.GetLocalID()),
+			PostId:    int(pid.GetLocalID()),
 			UserId:    requester.GetUserId(),
 		}
 		store := commentstorage.NewSQLStore(appCtx.GetMainDBConnection())
Index: subscriber/sub.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package subscriber\r\n\r\nimport (\r\n\t\"context\"\r\n\t\"instago2/common\"\r\n\t\"instago2/component\"\r\n\t\"instago2/component/asyncjob\"\r\n\t\"instago2/pubsub\"\r\n\t\"log\"\r\n)\r\n\r\ntype consumerJob struct {\r\n\tTitle string\r\n\tHld   func(ctx context.Context, message *pubsub.Message) error\r\n}\r\n\r\ntype consumerEngine struct {\r\n\tappCtx component.AppContext\r\n}\r\n\r\nfunc NewEngine(appContext component.AppContext) *consumerEngine {\r\n\treturn &consumerEngine{appCtx: appContext}\r\n}\r\n\r\nfunc (engine *consumerEngine) Start() error {\r\n\r\n\tengine.startSubTopic(\r\n\t\tcommon.TopicDeletePost,\r\n\t\ttrue,\r\n\t\tDeleteCommentAfterDeletePost(engine.appCtx),\r\n\t\tDeletePostLikeAfterDeletePost(engine.appCtx),\r\n\t\tDeleteCommentLikeAfterDeletePost(engine.appCtx),\r\n\t)\r\n\r\n\treturn nil\r\n}\r\n\r\ntype GroupJob interface {\r\n\tRun(ctx context.Context) error\r\n}\r\n\r\nfunc (engine *consumerEngine) startSubTopic(topic pubsub.Topic, isConcurrent bool, consumerJobs ...consumerJob) error {\r\n\tc, _ := engine.appCtx.GetPubsub().Subscribe(context.Background(), topic)\r\n\r\n\tfor _, item := range consumerJobs {\r\n\t\tlog.Println(\"Setup consumer for:\", item.Title)\r\n\t}\r\n\r\n\tgetJobHandler := func(job *consumerJob, message *pubsub.Message) asyncjob.JobHandler {\r\n\t\treturn func(ctx context.Context) error {\r\n\t\t\tlog.Println(\"running job for \", job.Title, \". Value: \", message.Data())\r\n\t\t\treturn job.Hld(ctx, message)\r\n\t\t}\r\n\t}\r\n\r\n\tgo func() {\r\n\t\tfor {\r\n\t\t\tmsg := <-c\r\n\r\n\t\t\tjobHdlArr := make([]asyncjob.Job, len(consumerJobs))\r\n\r\n\t\t\tfor i := range consumerJobs {\r\n\t\t\t\tjobHdl := getJobHandler(&consumerJobs[i], msg)\r\n\t\t\t\tjobHdlArr[i] = asyncjob.NewJob(jobHdl)\r\n\t\t\t}\r\n\r\n\t\t\tgroup := asyncjob.NewGroup(isConcurrent, jobHdlArr...)\r\n\r\n\t\t\tif err := group.Run(context.Background()); err != nil {\r\n\t\t\t\tlog.Println(err)\r\n\t\t\t}\r\n\t\t}\r\n\t}()\r\n\r\n\treturn nil\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/subscriber/sub.go b/subscriber/sub.go
--- a/subscriber/sub.go	
+++ b/subscriber/sub.go	
@@ -32,6 +32,12 @@
 		DeleteCommentLikeAfterDeletePost(engine.appCtx),
 	)
 
+	engine.startSubTopic(
+		common.TopicDeleteComment,
+		true,
+		DeleteCommentCountAfterDeleteComment(engine.appCtx),
+	)
+
 	return nil
 }
 
