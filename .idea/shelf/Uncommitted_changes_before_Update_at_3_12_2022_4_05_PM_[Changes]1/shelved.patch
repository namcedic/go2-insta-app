Index: modules/user/usertransport/ginuser/search_by_name.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ginuser\r\n\r\nimport (\r\n\t\"github.com/gin-gonic/gin\"\r\n\t\"instago2/common\"\r\n\t\"instago2/component\"\r\n\t\"instago2/modules/user/userbiz\"\r\n\t\"instago2/modules/user/userstorage\"\r\n\t\"net/http\"\r\n)\r\n\r\n// SearchUserByName godoc\r\n// @Summary      SearchUserByName\r\n// @Description  Search other user by username, first name or last name\r\n// @Tags         users\r\n// @Accept       json\r\n// @Produce \t json\r\n// @Param \t\t Authorization header string true \"Insert your access token\" default(Bearer <Add access token here>)\r\n// @Param        searchKey   path      string  true \"username, lastname or firstname of other user that current user want to search\"\r\n// @Success      200  {object}  []common.SimpleUser\r\n// @Failure      400  {object}  common.AppError\r\n// @Failure      404  {object}  common.AppError\r\n// @Failure      500  {object}  common.AppError\r\n// @Router       /users/search/{searchKey} [GET]\r\nfunc SearchUserByName(appCtx component.AppContext) gin.HandlerFunc {\r\n\treturn func(c *gin.Context) {\r\n\t\tsearchKey := c.Param(\"searchKey\")\r\n\t\tstore := userstorage.NewSQLStore(appCtx.GetMainDBConnection())\r\n\t\tbiz := userbiz.SearchUserByNameBiz(store)\r\n\r\n\t\tdata, err := biz.SearchUserByName(c.Request.Context(), searchKey)\r\n\t\tif err != nil {\r\n\t\t\tpanic(err)\r\n\t\t}\r\n\r\n\t\tfor i := range data {\r\n\t\t\tdata[i].Mask(false)\r\n\r\n\t\t}\r\n\r\n\t\tc.JSON(http.StatusOK, common.SimpleSuccessResponse(data))\r\n\r\n\t}\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/modules/user/usertransport/ginuser/search_by_name.go b/modules/user/usertransport/ginuser/search_by_name.go
--- a/modules/user/usertransport/ginuser/search_by_name.go	
+++ b/modules/user/usertransport/ginuser/search_by_name.go	
@@ -24,21 +24,29 @@
 // @Router       /users/search/{searchKey} [GET]
 func SearchUserByName(appCtx component.AppContext) gin.HandlerFunc {
 	return func(c *gin.Context) {
+		var paging common.Paging
+
+		if err := c.ShouldBind(&paging); err != nil {
+			panic(common.ErrInvalidRequest(err))
+		}
+
+		paging.Fulfill()
 		searchKey := c.Param("searchKey")
 		store := userstorage.NewSQLStore(appCtx.GetMainDBConnection())
 		biz := userbiz.SearchUserByNameBiz(store)
 
-		data, err := biz.SearchUserByName(c.Request.Context(), searchKey)
+		data, err := biz.SearchUser(c.Request.Context(), &paging, searchKey)
 		if err != nil {
 			panic(err)
 		}
 
 		for i := range data {
 			data[i].Mask(false)
-
+			if i == len(data)-1 {
+				paging.NextCursor = data[i].FakeId.String()
+			}
 		}
-
-		c.JSON(http.StatusOK, common.SimpleSuccessResponse(data))
+		c.JSON(http.StatusOK, common.NewSuccessResponse(data, paging, nil))
 
 	}
 }
Index: modules/commentlike/commentlikemodel/comment_likes.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package commentlikemodel\r\n\r\nimport (\r\n\t\"fmt\"\r\n\t\"instago2/common\"\r\n)\r\n\r\ntype CommentLikes struct {\r\n\tCommentId int                `json:\"comment_id\" gorm:\"column:comment_id;\"`\r\n\tUserId    int                `json:\"user_id\" gorm:\"column:user_id;\"`\r\n\tUser      *common.SimpleUser `json:\"user\" gorm:\"preload:false;\"`\r\n}\r\n\r\nfunc (u *CommentLikes) GetUserId() int {\r\n\treturn u.UserId\r\n}\r\nfunc (u *CommentLikes) GetCommentId() int {\r\n\treturn u.CommentId\r\n}\r\n\r\nfunc (CommentLikes) TableName() string {\r\n\treturn \"commentlike\"\r\n}\r\nfunc ErrCannotLikeComment(err error) *common.AppError {\r\n\treturn common.NewCustomError(\r\n\t\terr,\r\n\t\tfmt.Sprintf(\"Cannot like this comment\"),\r\n\t\tfmt.Sprintf(\"ErrCannotLikeComment\"),\r\n\t)\r\n}\r\n\r\nfunc ErrCannotUnlikeComment(err error) *common.AppError {\r\n\treturn common.NewCustomError(\r\n\t\terr,\r\n\t\tfmt.Sprintf(\"Cannot unlike this comment\"),\r\n\t\tfmt.Sprintf(\"ErrCannotUnlikeComment\"),\r\n\t)\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/modules/commentlike/commentlikemodel/comment_likes.go b/modules/commentlike/commentlikemodel/comment_likes.go
--- a/modules/commentlike/commentlikemodel/comment_likes.go	
+++ b/modules/commentlike/commentlikemodel/comment_likes.go	
@@ -19,7 +19,7 @@
 }
 
 func (CommentLikes) TableName() string {
-	return "commentlike"
+	return "comment_likes"
 }
 func ErrCannotLikeComment(err error) *common.AppError {
 	return common.NewCustomError(
Index: modules/user/userbiz/search_by_name.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package userbiz\r\n\r\nimport (\r\n\t\"context\"\r\n\t\"instago2/common\"\r\n)\r\n\r\ntype SearchUserByName interface {\r\n\tFindUserByName(\r\n\t\tctx context.Context,\r\n\t\tsearchKey string,\r\n\t\tmoreKeys ...string,\r\n\t) ([]common.SimpleUser, error)\r\n}\r\n\r\ntype searchUserByNameBiz struct {\r\n\tstore SearchUserByName\r\n}\r\n\r\nfunc SearchUserByNameBiz(store SearchUserByName) *searchUserByNameBiz {\r\n\treturn &searchUserByNameBiz{store: store}\r\n}\r\n\r\nfunc (biz *searchUserByNameBiz) SearchUserByName(ctx context.Context, searchKey string) ([]common.SimpleUser, error) {\r\n\tdata, err := biz.store.FindUserByName(ctx, searchKey)\r\n\r\n\tif err != nil {\r\n\t\treturn nil, common.ErrCannotGetEntity(\"There is no result !\", err)\r\n\t}\r\n\treturn data, err\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/modules/user/userbiz/search_by_name.go b/modules/user/userbiz/search_by_name.go
--- a/modules/user/userbiz/search_by_name.go	
+++ b/modules/user/userbiz/search_by_name.go	
@@ -3,11 +3,13 @@
 import (
 	"context"
 	"instago2/common"
+	"instago2/modules/user/usermodel"
 )
 
 type SearchUserByName interface {
 	FindUserByName(
 		ctx context.Context,
+		paging *common.Paging,
 		searchKey string,
 		moreKeys ...string,
 	) ([]common.SimpleUser, error)
@@ -21,11 +23,15 @@
 	return &searchUserByNameBiz{store: store}
 }
 
-func (biz *searchUserByNameBiz) SearchUserByName(ctx context.Context, searchKey string) ([]common.SimpleUser, error) {
-	data, err := biz.store.FindUserByName(ctx, searchKey)
+func (biz *searchUserByNameBiz) SearchUser(ctx context.Context,
+	paging *common.Paging,
+	searchKey string) ([]common.SimpleUser, error) {
+
+	data, err := biz.store.FindUserByName(ctx, paging, searchKey)
 
 	if err != nil {
-		return nil, common.ErrCannotGetEntity("There is no result !", err)
+		return nil, common.ErrCannotGetEntity(usermodel.EntityName, err)
 	}
+
 	return data, err
 }
Index: modules/user/userstorage/find.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package userstorage\r\n\r\nimport (\r\n\t\"context\"\r\n\t\"gorm.io/gorm\"\r\n\t\"instago2/common\"\r\n\t\"instago2/modules/user/usermodel\"\r\n)\r\n\r\nfunc (s *sqlStore) FindUser(ctx context.Context, conditions map[string]interface{}, moreInfo ...string) (*usermodel.User, error) {\r\n\tdb := s.db.Table(usermodel.User{}.TableName())\r\n\r\n\tfor i := range moreInfo {\r\n\t\tdb = db.Preload(moreInfo[i])\r\n\t}\r\n\r\n\tvar user usermodel.User\r\n\r\n\tif err := db.Where(conditions).First(&user).Error; err != nil {\r\n\t\tif err == gorm.ErrRecordNotFound {\r\n\t\t\treturn nil, common.RecordNotFound\r\n\t\t}\r\n\r\n\t\treturn nil, common.ErrDB(err)\r\n\t}\r\n\r\n\treturn &user, nil\r\n}\r\n\r\nfunc (s *sqlStore) FindUserByName(\r\n\tctx context.Context,\r\n\tsearchKey string,\r\n\tmoreInfo ...string,\r\n) ([]common.SimpleUser, error) {\r\n\tdb := s.db.Table(usermodel.User{}.TableName())\r\n\r\n\tfor i := range moreInfo {\r\n\t\tdb = db.Preload(moreInfo[i])\r\n\t}\r\n\r\n\tvar user []common.SimpleUser\r\n\r\n\tif err := db.Where(\"user_name LIKE ?\", \"%\"+searchKey+\"%\").Or(\"first_name LIKE ?\", \"%\"+searchKey+\"%\").Or(\"last_name LIKE ?\", \"%\"+searchKey+\"%\").Find(&user).Error; err != nil {\r\n\t\tif err == gorm.ErrRecordNotFound {\r\n\t\t\treturn nil, common.RecordNotFound\r\n\t\t}\r\n\r\n\t\treturn nil, common.ErrDB(err)\r\n\t}\r\n\r\n\treturn user, nil\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/modules/user/userstorage/find.go b/modules/user/userstorage/find.go
--- a/modules/user/userstorage/find.go	
+++ b/modules/user/userstorage/find.go	
@@ -29,22 +29,36 @@
 
 func (s *sqlStore) FindUserByName(
 	ctx context.Context,
+	paging *common.Paging,
 	searchKey string,
-	moreInfo ...string,
+	moreKeys ...string,
 ) ([]common.SimpleUser, error) {
-	db := s.db.Table(usermodel.User{}.TableName())
-
-	for i := range moreInfo {
-		db = db.Preload(moreInfo[i])
-	}
-
 	var user []common.SimpleUser
 
-	if err := db.Where("user_name LIKE ?", "%"+searchKey+"%").Or("first_name LIKE ?", "%"+searchKey+"%").Or("last_name LIKE ?", "%"+searchKey+"%").Find(&user).Error; err != nil {
-		if err == gorm.ErrRecordNotFound {
-			return nil, common.RecordNotFound
-		}
+	db := s.db.Table(usermodel.User{}.TableName())
+
+	for i := range moreKeys {
+		db = db.Preload(moreKeys[i])
+	}
+
+	db = db.Where("user_name LIKE ?", "%"+searchKey+"%").Or("first_name LIKE ?", "%"+searchKey+"%").Or("last_name LIKE ?", "%"+searchKey+"%")
+
+	if err := db.Count(&paging.Total).Error; err != nil {
+		return nil, common.ErrDB(err)
+	}
 
+	if v := paging.FakeCursor; v != "" {
+		if uid, err := common.FromBase58(v); err == nil {
+			db = db.Where("id < ?", uid.GetLocalID())
+		}
+	} else {
+		db = db.Offset((paging.Page - 1) * paging.Limit)
+	}
+
+	if err := db.
+		Limit(paging.Limit).
+		Order("id desc").
+		Find(&user).Error; err != nil {
 		return nil, common.ErrDB(err)
 	}
 
Index: main.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main\r\n\r\nimport (\r\n\tginSwagger \"github.com/swaggo/gin-swagger\"\r\n\t\"github.com/swaggo/gin-swagger/swaggerFiles\"\r\n\t\"instago2/component\"\r\n\t\"instago2/component/uploadprovider\"\r\n\t_ \"instago2/docs\"\r\n\t\"instago2/middleware\"\r\n\t\"instago2/modules/comment/transport/gincomment\"\r\n\t\"instago2/modules/comment/transport/ginreplycomment\"\r\n\t\"instago2/modules/commentlike/commentliketransport\"\r\n\t\"instago2/modules/post/posttransport/ginpost\"\r\n\t\"instago2/modules/postlike/postliketransport\"\r\n\t\"instago2/modules/postsearch/postsearchtransport/ginpostsearch\"\r\n\t\"instago2/modules/upload/uploadtransport/ginupload\"\r\n\t\"instago2/modules/user/usertransport/ginuser\"\r\n\t\"instago2/modules/userfollow/userfollowtransport/ginuserfollow\"\r\n\t\"instago2/pubsub/pblocal\"\r\n\t\"instago2/subscriber\"\r\n\t\"log\"\r\n\t\"net/http\"\r\n\t\"os\"\r\n\r\n\t\"github.com/gin-gonic/gin\"\r\n\t\"github.com/joho/godotenv\"\r\n\t\"gorm.io/driver/mysql\"\r\n\t\"gorm.io/gorm\"\r\n)\r\n\r\n// @title           Swagger Insta API\r\n// @version         1.0\r\n// @description     This is a images social network.\r\n// @termsOfService  http://swagger.io/terms/\r\n\r\n// @contact.name   API Support\r\n// @contact.url    http://www.swagger.io/support\r\n// @contact.email  support@swagger.io\r\n\r\n// @license.name  Apache 2.0\r\n// @license.url   http://www.apache.org/licenses/LICENSE-2.0.html\r\n\r\n// @host      localhost:8080\r\n// @BasePath  /v1\r\n\r\n// @securityDefinitions.basic  BasicAuth\r\n\r\nfunc goDotEnvVariable(key string) string {\r\n\r\n\terr := godotenv.Load(\"md.env\")\r\n\r\n\tif err != nil {\r\n\t\tlog.Fatalf(\"Error loading .env file\")\r\n\t}\r\n\r\n\treturn os.Getenv(key)\r\n}\r\n\r\nfunc main() {\r\n\tdsn := goDotEnvVariable(\"DBCONNECTIONSTR\")\r\n\r\n\ts3BucketName := goDotEnvVariable(\"S3BUCKETNAME\")\r\n\ts3Region := goDotEnvVariable(\"S3REGION\")\r\n\ts3APIKey := goDotEnvVariable(\"S3APIKEY\")\r\n\ts3SecretKey := goDotEnvVariable(\"S3SECRETKEY\")\r\n\ts3Domain := goDotEnvVariable(\"S3DOMAIN\")\r\n\tsecretKey := goDotEnvVariable(\"LOGINSECRETKEY\")\r\n\r\n\ts3Provider := uploadprovider.NewS3Provider(s3BucketName, s3Region, s3APIKey, s3SecretKey, s3Domain)\r\n\r\n\tdb, err := gorm.Open(mysql.Open(dsn), &gorm.Config{})\r\n\r\n\tif err != nil {\r\n\t\tlog.Fatalln(err)\r\n\t}\r\n\r\n\tdb = db.Debug()\r\n\tif err := runService(db, s3Provider, secretKey); err != nil {\r\n\t\tlog.Fatalln(err)\r\n\t}\r\n\r\n}\r\n\r\nfunc runService(db *gorm.DB, upProvider uploadprovider.UploadProvider, secretKey string) error {\r\n\r\n\tappCtx := component.NewAppContext(db, upProvider, secretKey, pblocal.NewPubSub())\r\n\r\n\tif err := subscriber.NewEngine(appCtx).Start(); err != nil {\r\n\t\tlog.Fatalln(err)\r\n\t}\r\n\tr := gin.Default()\r\n\tr.Use(middleware.Recover(appCtx))\r\n\tr.GET(\"/ping\", func(c *gin.Context) {\r\n\t\tc.JSON(http.StatusOK, gin.H{\r\n\t\t\t\"message\": \"true\",\r\n\t\t})\r\n\t})\r\n\r\n\tr.GET(\"/swagger/*any\", ginSwagger.WrapHandler(swaggerFiles.Handler))\r\n\r\n\tv1 := r.Group(\"/v1\")\r\n\tv1.POST(\"/upload\", middleware.RequiredAuth(appCtx), ginupload.Upload(appCtx))\r\n\tv1.POST(\"/register\", ginuser.Register(appCtx))\r\n\tv1.POST(\"/login\", ginuser.Login(appCtx))\r\n\r\n\tusers := v1.Group(\"/users\", middleware.RequiredAuth(appCtx))\r\n\t{\r\n\t\t// get profile of current user\r\n\t\tusers.GET(\"/profile\", ginuser.GetProfile(appCtx))\r\n\t\t// update profile of current user\r\n\t\tusers.PATCH(\"\", ginuser.UpdateProfile(appCtx))\r\n\r\n\t\t// get profile of other user\r\n\t\tusers.GET(\"/profile/:id\", ginuser.GetOtherProfile(appCtx))\r\n\t\t// follow\r\n\t\tusers.POST(\"/:id/follow\", ginuserfollow.UserFollowUser(appCtx))\r\n\t\t// unfollow\r\n\t\tusers.DELETE(\"/:id/unfollow\", ginuserfollow.UserUnfollowUser(appCtx))\r\n\t\t// list followers\r\n\t\tusers.GET(\"/follower\", ginuserfollow.ListFollower(appCtx))\r\n\t\t// list following\r\n\t\tusers.GET(\"/following\", ginuserfollow.ListFollowing(appCtx))\r\n\t\t// search by name\r\n\t\tusers.GET(\"/search/:searchKey\", ginuser.SearchUserByName(appCtx))\r\n\t}\r\n\r\n\tposts := v1.Group(\"/posts\", middleware.RequiredAuth(appCtx))\r\n\t{\r\n\t\t//Create post\r\n\t\tposts.POST(\"\", ginpost.CreatePost(appCtx))\r\n\t\t//Update post\r\n\t\tposts.PATCH(\"/:id\", ginpost.UpdatePost(appCtx))\r\n\t\t// create reply a comment\r\n\t\tposts.POST(\"/comments/replies\", ginreplycomment.CreateReply(appCtx))\r\n\r\n\t\t// List comments of one post\r\n\t\tposts.GET(\"/:id/comments\", ginreplycomment.ListComment(appCtx))\r\n\t\t// list all posts\r\n\t\tposts.GET(\"/explore\", ginpost.ListPost(appCtx))\r\n\t\t// Get post\r\n\t\tposts.GET(\"/explore/:id\", ginpost.GetPost(appCtx))\r\n\t\t// Get posts of all following list\r\n\t\tposts.GET(\"/explore/following\", ginpost.ListFollowingPost(appCtx))\r\n\t\t// Like post\r\n\t\tposts.POST(\"/:id/like\", postliketransport.CreatePostLikes(appCtx))\r\n\t\t// Unlike post\r\n\t\tposts.DELETE(\"/:id/unlike\", postliketransport.UnlikePost(appCtx))\r\n\t\t// Comment post\r\n\t\tposts.POST(\"/:id/comment\", gincomment.CreateComment(appCtx))\r\n\t\t// Delete post\r\n\t\tposts.DELETE(\"/:id\", ginpost.DeletePost(appCtx))\r\n\t\t// Search posts by caption, search name and time\r\n\t\tposts.POST(\"/searches\", ginpostsearch.ListPostSearch(appCtx))\r\n\t}\r\n\r\n\tcomments := v1.Group(\"comments\", middleware.RequiredAuth(appCtx))\r\n\t{\r\n\t\t// Like comment\r\n\t\tcomments.POST(\"/:id/like\", commentliketransport.CreateCommentLikes(appCtx))\r\n\t\t//Unlike comment\r\n\t\tcomments.DELETE(\"/:id/unlike\", commentliketransport.UnlikeComment(appCtx))\r\n\t\t//Delete comments\r\n\t\tcomments.DELETE(\"/:id\", gincomment.DeleteComment(appCtx))\r\n\r\n\t}\r\n\r\n\treturn r.Run()\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.go b/main.go
--- a/main.go	
+++ b/main.go	
@@ -150,7 +150,7 @@
 		// Delete post
 		posts.DELETE("/:id", ginpost.DeletePost(appCtx))
 		// Search posts by caption, search name and time
-		posts.POST("/searches", ginpostsearch.ListPostSearch(appCtx))
+		posts.GET("/searches", ginpostsearch.ListPostSearch(appCtx))
 	}
 
 	comments := v1.Group("comments", middleware.RequiredAuth(appCtx))
Index: modules/user/usermodel/filter.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/modules/user/usermodel/filter.go b/modules/user/usermodel/filter.go
new file mode 100644
--- /dev/null	
+++ b/modules/user/usermodel/filter.go	
@@ -0,0 +1,5 @@
+package usermodel
+
+type Filter struct {
+	UserId int `json:"user_id,omitempty" form:"user_id"`
+}
Index: modules/post/postmodel/post.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package postmodel\r\n\r\nimport (\r\n\t\"instago2/common\"\r\n)\r\n\r\nconst EntityName = \"Post\"\r\n\r\ntype Post struct {\r\n\tcommon.SQLModel `json:\",inline\"`\r\n\tUserId          int                `json:\"user_id\" gorm:\"column:user_id;\"`\r\n\tImg             *common.Image      `json:\"img\" gorm:\"column:img;\"`\r\n\tCaption         *string            `json:\"caption\" gorm:\"column:caption;\"`\r\n\tUser            *common.SimpleUser `json:\"user\" gorm:\"preload:false;\"`\r\n\tPostLikedCount  int                `json:\"post_liked_count\" gorm:\"post_liked_count;\"`\r\n\tCommentCount    int                `json:\"comment_count\" gorm:\"comment_count;\"`\r\n}\r\n\r\n// can call directly, can delete these function\r\nfunc (u *Post) GetPostId() int {\r\n\treturn u.Id\r\n}\r\n\r\nfunc (u *Post) GetUserId() int {\r\n\treturn u.UserId\r\n}\r\n\r\nfunc (Post) TableName() string {\r\n\treturn \"posts\"\r\n}\r\n\r\nfunc (u *Post) Mask(isAdmin bool) {\r\n\tu.GenUID(common.DbTypePost)\r\n}\r\n\r\nfunc (u *Post) GetCaption() *string {\r\n\treturn u.Caption\r\n}\r\n\r\n// can call directly, can delete this field\r\n\r\ntype PostCreate struct {\r\n\tcommon.SQLModel `json:\",inline\"`\r\n\tUserId          int           `json:\"user_id\" gorm:\"column:user_id;\"`\r\n\tImg             *common.Image `json:\"img\" gorm:\"column:img;\"`\r\n\tCaption         string        `json:\"caption\" gorm:\"column:caption;\"`\r\n}\r\n\r\nfunc (PostCreate) TableName() string {\r\n\treturn \"posts\"\r\n}\r\n\r\ntype PostUpdate struct {\r\n\tcommon.SQLModel `json:\",inline\"`\r\n\tUserId          int           `json:\"user_id\" gorm:\"column:user_id;\"`\r\n\tImg             *common.Image `json:\"img\" gorm:\"column:img;\"`\r\n\tCaption         *string       `json:\"caption\" gorm:\"column:caption;\"`\r\n}\r\n\r\nfunc (PostUpdate) TableName() string {\r\n\treturn \"posts\"\r\n}\r\n\r\ntype PostDelete struct {\r\n\tPostId int `json:\"id\" gorm:\"id;\" form:\"id\" `\r\n\tUserId int `json:\"user_id\" gorm:\"user_id;\" form:\"user_id\"`\r\n}\r\n\r\nfunc (p *PostDelete) GetPostDeleteId() int {\r\n\treturn p.PostId\r\n}\r\n\r\nfunc (p *PostDelete) GetUserId() int {\r\n\treturn p.UserId\r\n}\r\n\r\nfunc (PostDelete) TableName() string {\r\n\treturn \"posts\"\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/modules/post/postmodel/post.go b/modules/post/postmodel/post.go
--- a/modules/post/postmodel/post.go	
+++ b/modules/post/postmodel/post.go	
@@ -51,10 +51,8 @@
 }
 
 type PostUpdate struct {
-	common.SQLModel `json:",inline"`
-	UserId          int           `json:"user_id" gorm:"column:user_id;"`
-	Img             *common.Image `json:"img" gorm:"column:img;"`
-	Caption         *string       `json:"caption" gorm:"column:caption;"`
+	Img     *common.Image `json:"img" gorm:"column:img;"`
+	Caption *string       `json:"caption" gorm:"column:caption;"`
 }
 
 func (PostUpdate) TableName() string {
Index: modules/post/postbiz/update_post.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package postbiz\r\n\r\nimport (\r\n\t\"context\"\r\n\t\"instago2/common\"\r\n\t\"instago2/modules/post/postmodel\"\r\n)\r\n\r\ntype UpdatePost interface {\r\n\tFindDataByCondition(\r\n\t\tctx context.Context,\r\n\t\tconditions map[string]interface{},\r\n\t\tmoreKeys ...string,\r\n\t) (*postmodel.Post, error)\r\n\tUpdateData(\r\n\t\tctx context.Context,\r\n\t\tid int,\r\n\t\tdata *postmodel.PostUpdate,\r\n\t) error\r\n}\r\n\r\ntype updatePostBiz struct {\r\n\tstore UpdatePost\r\n}\r\n\r\nfunc NewUpdatePostBiz(store UpdatePost) *updatePostBiz {\r\n\treturn &updatePostBiz{store: store}\r\n}\r\n\r\nfunc (biz *updatePostBiz) UpdatePost(ctx context.Context, id int, data *postmodel.PostUpdate) error {\r\n\toldData, err := biz.store.FindDataByCondition(ctx, map[string]interface{}{\"id\": id})\r\n\r\n\tif err != nil {\r\n\t\treturn common.ErrCannotGetEntity(postmodel.EntityName, err)\r\n\t}\r\n\r\n\tif oldData.Status == 0 {\r\n\t\treturn common.ErrEntityDeleted(postmodel.EntityName, nil)\r\n\t}\r\n\r\n\tif err := biz.store.UpdateData(ctx, id, data); err != nil {\r\n\t\treturn common.ErrCannotUpdateEntity(postmodel.EntityName, err)\r\n\t}\r\n\r\n\treturn nil\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/modules/post/postbiz/update_post.go b/modules/post/postbiz/update_post.go
--- a/modules/post/postbiz/update_post.go	
+++ b/modules/post/postbiz/update_post.go	
@@ -15,6 +15,7 @@
 	UpdateData(
 		ctx context.Context,
 		id int,
+		userId int,
 		data *postmodel.PostUpdate,
 	) error
 }
@@ -27,8 +28,8 @@
 	return &updatePostBiz{store: store}
 }
 
-func (biz *updatePostBiz) UpdatePost(ctx context.Context, id int, data *postmodel.PostUpdate) error {
-	oldData, err := biz.store.FindDataByCondition(ctx, map[string]interface{}{"id": id})
+func (biz *updatePostBiz) UpdatePost(ctx context.Context, id int, userId int, data *postmodel.PostUpdate) error {
+	oldData, err := biz.store.FindDataByCondition(ctx, map[string]interface{}{"id": id, "user_id": userId})
 
 	if err != nil {
 		return common.ErrCannotGetEntity(postmodel.EntityName, err)
@@ -38,7 +39,7 @@
 		return common.ErrEntityDeleted(postmodel.EntityName, nil)
 	}
 
-	if err := biz.store.UpdateData(ctx, id, data); err != nil {
+	if err := biz.store.UpdateData(ctx, id, userId, data); err != nil {
 		return common.ErrCannotUpdateEntity(postmodel.EntityName, err)
 	}
 
Index: modules/post/posttransport/ginpost/list_post.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ginpost\r\n\r\nimport (\r\n\t\"instago2/common\"\r\n\t\"instago2/component\"\r\n\t\"instago2/modules/post/postbiz\"\r\n\t\"instago2/modules/post/poststorage\"\r\n\t\"net/http\"\r\n\r\n\t\"github.com/gin-gonic/gin\"\r\n)\r\n\r\nfunc ListPost(appCtx component.AppContext) gin.HandlerFunc {\r\n\treturn func(c *gin.Context) {\r\n\r\n\t\tvar paging common.Paging\r\n\r\n\t\tif err := c.ShouldBind(&paging); err != nil {\r\n\t\t\tpanic(common.ErrInvalidRequest(err))\r\n\t\t}\r\n\r\n\t\tpaging.Fulfill()\r\n\r\n\t\tstore := poststorage.NewSQLStore(appCtx.GetMainDBConnection())\r\n\t\tbiz := postbiz.NewListPostBiz(store)\r\n\r\n\t\tresult, err := biz.ListPost(c.Request.Context(), &paging)\r\n\r\n\t\tif err != nil {\r\n\t\t\tpanic(err)\r\n\t\t}\r\n\r\n\t\tfor i := range result {\r\n\t\t\tresult[i].Mask(false)\r\n\r\n\t\t\tif i == len(result)-1 {\r\n\t\t\t\tpaging.NextCursor = result[i].FakeId.String()\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tc.JSON(http.StatusOK, common.NewSuccessResponse(result, paging, nil))\r\n\t}\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/modules/post/posttransport/ginpost/list_post.go b/modules/post/posttransport/ginpost/list_post.go
--- a/modules/post/posttransport/ginpost/list_post.go	
+++ b/modules/post/posttransport/ginpost/list_post.go	
@@ -32,12 +32,10 @@
 
 		for i := range result {
 			result[i].Mask(false)
-
 			if i == len(result)-1 {
 				paging.NextCursor = result[i].FakeId.String()
 			}
 		}
-
 		c.JSON(http.StatusOK, common.NewSuccessResponse(result, paging, nil))
 	}
 }
Index: modules/post/posttransport/ginpost/update_post.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ginpost\r\n\r\nimport (\r\n\t\"github.com/gin-gonic/gin\"\r\n\t\"instago2/common\"\r\n\t\"instago2/component\"\r\n\t\"instago2/modules/post/postbiz\"\r\n\t\"instago2/modules/post/postmodel\"\r\n\t\"instago2/modules/post/poststorage\"\r\n\t\"net/http\"\r\n\t\"strconv\"\r\n)\r\n\r\n// UpdatePost godoc\r\n// @Summary      UpdatePost\r\n// @Description  User updates post\r\n// @Tags         posts\r\n// @Accept       json\r\n// @Param Authorization header string true \"Insert your access token\" default(Bearer <Add access token here>)\r\n// @Param        id   path      int  true \"id of the post that user want to delete (in int)\"\r\n// @Param        post   body    postmodel.PostUpdate  true \"information of the post that user want to edit\"\r\n// @Success      200  {object}  common.successRes\r\n// @Failure      400  {object}  common.AppError\r\n// @Failure      404  {object}  common.AppError\r\n// @Failure      500  {object}  common.AppError\r\n// @Router       /posts/{id} [PATCH]\r\nfunc UpdatePost(appCtx component.AppContext) gin.HandlerFunc {\r\n\treturn func(c *gin.Context) {\r\n\t\t//uid, err := common.FromBase58(c.Param(\"id\"))\r\n\t\tuid, err := strconv.Atoi(c.Param(\"id\"))\r\n\r\n\t\tif err != nil {\r\n\t\t\tpanic(common.ErrInvalidRequest(err))\r\n\t\t}\r\n\r\n\t\tvar data postmodel.PostUpdate\r\n\r\n\t\tif err := c.ShouldBind(&data); err != nil {\r\n\t\t\tpanic(common.ErrInvalidRequest(err))\r\n\t\t}\r\n\r\n\t\tstore := poststorage.NewSQLStore(appCtx.GetMainDBConnection())\r\n\t\tbiz := postbiz.NewUpdatePostBiz(store)\r\n\r\n\t\tif err := biz.UpdatePost(c.Request.Context(), int(uid), &data); err != nil {\r\n\t\t\tpanic(err)\r\n\t\t}\r\n\r\n\t\tc.JSON(http.StatusOK, common.SimpleSuccessResponse(true))\r\n\t}\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/modules/post/posttransport/ginpost/update_post.go b/modules/post/posttransport/ginpost/update_post.go
--- a/modules/post/posttransport/ginpost/update_post.go	
+++ b/modules/post/posttransport/ginpost/update_post.go	
@@ -8,7 +8,6 @@
 	"instago2/modules/post/postmodel"
 	"instago2/modules/post/poststorage"
 	"net/http"
-	"strconv"
 )
 
 // UpdatePost godoc
@@ -17,7 +16,7 @@
 // @Tags         posts
 // @Accept       json
 // @Param Authorization header string true "Insert your access token" default(Bearer <Add access token here>)
-// @Param        id   path      int  true "id of the post that user want to delete (in int)"
+// @Param        id   path      int  true "id of the post that user want to delete (encoded in uuid)"
 // @Param        post   body    postmodel.PostUpdate  true "information of the post that user want to edit"
 // @Success      200  {object}  common.successRes
 // @Failure      400  {object}  common.AppError
@@ -26,13 +25,14 @@
 // @Router       /posts/{id} [PATCH]
 func UpdatePost(appCtx component.AppContext) gin.HandlerFunc {
 	return func(c *gin.Context) {
-		//uid, err := common.FromBase58(c.Param("id"))
-		uid, err := strconv.Atoi(c.Param("id"))
+		uid, err := common.FromBase58(c.Param("id"))
+		//uid, err := strconv.Atoi(c.Param("id"))
 
 		if err != nil {
 			panic(common.ErrInvalidRequest(err))
 		}
-
+		requester := c.MustGet(common.CurrentUser).(common.Requester)
+		userId := requester.GetUserId()
 		var data postmodel.PostUpdate
 
 		if err := c.ShouldBind(&data); err != nil {
@@ -42,7 +42,7 @@
 		store := poststorage.NewSQLStore(appCtx.GetMainDBConnection())
 		biz := postbiz.NewUpdatePostBiz(store)
 
-		if err := biz.UpdatePost(c.Request.Context(), int(uid), &data); err != nil {
+		if err := biz.UpdatePost(c.Request.Context(), int(uid.GetLocalID()), userId, &data); err != nil {
 			panic(err)
 		}
 
Index: modules/post/poststorage/update.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package poststorage\r\n\r\nimport (\r\n\t\"context\"\r\n\t\"gorm.io/gorm\"\r\n\t\"instago2/common\"\r\n\t\"instago2/modules/post/postmodel\"\r\n)\r\n\r\nfunc (s *sqlStore) UpdateData(\r\n\tctx context.Context,\r\n\tid int,\r\n\tdata *postmodel.PostUpdate,\r\n) error {\r\n\tdb := s.db\r\n\r\n\tif err := db.Where(\"id = ?\", id).Updates(data).Error; err != nil {\r\n\t\treturn common.ErrDB(err)\r\n\t}\r\n\r\n\treturn nil\r\n}\r\n\r\nfunc (s *sqlStore) IncreaseLikeCount(ctx context.Context, id int) error {\r\n\tdb := s.db\r\n\r\n\tif err := db.Table(postmodel.PostUpdate{}.TableName()).Where(\"id = ?\", id).\r\n\t\tUpdate(\"post_liked_count\", gorm.Expr(\"post_liked_count + ?\", 1)).Error; err != nil {\r\n\t\treturn common.ErrDB(err)\r\n\t}\r\n\r\n\treturn nil\r\n}\r\n\r\nfunc (s *sqlStore) DecreasePostLikeCount(ctx context.Context, id int) error {\r\n\tdb := s.db\r\n\r\n\tif err := db.Table(postmodel.PostUpdate{}.TableName()).Where(\"id = ?\", id).\r\n\t\tUpdate(\"post_liked_count\", gorm.Expr(\"post_liked_count - ?\", 1)).Error; err != nil {\r\n\t\treturn common.ErrDB(err)\r\n\t}\r\n\treturn nil\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/modules/post/poststorage/update.go b/modules/post/poststorage/update.go
--- a/modules/post/poststorage/update.go	
+++ b/modules/post/poststorage/update.go	
@@ -10,11 +10,12 @@
 func (s *sqlStore) UpdateData(
 	ctx context.Context,
 	id int,
+	userId int,
 	data *postmodel.PostUpdate,
 ) error {
 	db := s.db
 
-	if err := db.Where("id = ?", id).Updates(data).Error; err != nil {
+	if err := db.Where("id = ?", id).Where("user_id = ?", userId).Updates(data).Error; err != nil {
 		return common.ErrDB(err)
 	}
 
