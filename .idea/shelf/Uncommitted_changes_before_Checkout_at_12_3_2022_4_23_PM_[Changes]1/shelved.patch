Index: subscriber/delete_comment_like_after_delete_comment.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/subscriber/delete_comment_like_after_delete_comment.go b/subscriber/delete_comment_like_after_delete_comment.go
deleted file mode 100644
--- a/subscriber/delete_comment_like_after_delete_comment.go	
+++ /dev/null	
@@ -1,23 +0,0 @@
-package subscriber
-
-import (
-	"context"
-	"instago2/component"
-	"instago2/modules/commentlike/commentlikestorage"
-	"instago2/pubsub"
-)
-
-type HasCommentDeleteId interface {
-	GetCommmentDeleteId() int
-}
-
-func DeleteCommentLikeAfterDeleteComment(appCtx component.AppContext) consumerJob {
-	return consumerJob{
-		Title: "Delete comment like after delete comment",
-		Hld: func(ctx context.Context, message *pubsub.Message) error {
-			store := commentlikestorage.NewSQLStore(appCtx.GetMainDBConnection())
-			deleteData := message.Data().(HasCommentDeleteId)
-			return store.DeleteAfterDeleteComment(ctx, deleteData.GetCommmentDeleteId())
-		},
-	}
-}
Index: subscriber/sub.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package subscriber\r\n\r\nimport (\r\n\t\"context\"\r\n\t\"instago2/common\"\r\n\t\"instago2/component\"\r\n\t\"instago2/component/asyncjob\"\r\n\t\"instago2/pubsub\"\r\n\t\"log\"\r\n)\r\n\r\ntype consumerJob struct {\r\n\tTitle string\r\n\tHld   func(ctx context.Context, message *pubsub.Message) error\r\n}\r\n\r\ntype consumerEngine struct {\r\n\tappCtx component.AppContext\r\n}\r\n\r\nfunc NewEngine(appContext component.AppContext) *consumerEngine {\r\n\treturn &consumerEngine{appCtx: appContext}\r\n}\r\n\r\nfunc (engine *consumerEngine) Start() error {\r\n\r\n\tengine.startSubTopic(\r\n\t\tcommon.TopicDeletePost,\r\n\t\ttrue,\r\n\t\tDeleteCommentAfterDeletePost(engine.appCtx),\r\n\t\tDeletePostLikeAfterDeletePost(engine.appCtx),\r\n\t\tDeleteCommentLikeAfterDeletePost(engine.appCtx),\r\n\t)\r\n\r\n\tengine.startSubTopic(\r\n\t\tcommon.TopicDeleteComment,\r\n\t\ttrue,\r\n\t\tDeleteCommentLikeAfterDeleteComment(engine.appCtx),\r\n\t)\r\n\r\n\treturn nil\r\n}\r\n\r\ntype GroupJob interface {\r\n\tRun(ctx context.Context) error\r\n}\r\n\r\nfunc (engine *consumerEngine) startSubTopic(topic pubsub.Topic, isConcurrent bool, consumerJobs ...consumerJob) error {\r\n\tc, _ := engine.appCtx.GetPubsub().Subscribe(context.Background(), topic)\r\n\r\n\tfor _, item := range consumerJobs {\r\n\t\tlog.Println(\"Setup consumer for:\", item.Title)\r\n\t}\r\n\r\n\tgetJobHandler := func(job *consumerJob, message *pubsub.Message) asyncjob.JobHandler {\r\n\t\treturn func(ctx context.Context) error {\r\n\t\t\tlog.Println(\"running job for \", job.Title, \". Value: \", message.Data())\r\n\t\t\treturn job.Hld(ctx, message)\r\n\t\t}\r\n\t}\r\n\r\n\tgo func() {\r\n\t\tfor {\r\n\t\t\tmsg := <-c\r\n\r\n\t\t\tjobHdlArr := make([]asyncjob.Job, len(consumerJobs))\r\n\r\n\t\t\tfor i := range consumerJobs {\r\n\t\t\t\tjobHdl := getJobHandler(&consumerJobs[i], msg)\r\n\t\t\t\tjobHdlArr[i] = asyncjob.NewJob(jobHdl)\r\n\t\t\t}\r\n\r\n\t\t\tgroup := asyncjob.NewGroup(isConcurrent, jobHdlArr...)\r\n\r\n\t\t\tif err := group.Run(context.Background()); err != nil {\r\n\t\t\t\tlog.Println(err)\r\n\t\t\t}\r\n\t\t}\r\n\t}()\r\n\r\n\treturn nil\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/subscriber/sub.go b/subscriber/sub.go
--- a/subscriber/sub.go	
+++ b/subscriber/sub.go	
@@ -32,12 +32,6 @@
 		DeleteCommentLikeAfterDeletePost(engine.appCtx),
 	)
 
-	engine.startSubTopic(
-		common.TopicDeleteComment,
-		true,
-		DeleteCommentLikeAfterDeleteComment(engine.appCtx),
-	)
-
 	return nil
 }
 
Index: modules/commentlike/commentlikestorage/delete.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package commentlikestorage\r\n\r\nimport (\r\n\t\"context\"\r\n\t\"instago2/common\"\r\n\t\"instago2/modules/commentlike/commentlikemodel\"\r\n)\r\n\r\nfunc (s *sqlStore) Delete(ctx context.Context, commentId, userId int) error {\r\n\tdb := s.db\r\n\r\n\tif err := db.Table(commentlikemodel.CommentLikes{}.TableName()).\r\n\t\tWhere(\"comment_id = ? and user_id = ?\", commentId, userId).\r\n\t\tDelete(nil).Error; err != nil {\r\n\t\treturn common.ErrDB(err)\r\n\t}\r\n\treturn nil\r\n}\r\n\r\nfunc (s *sqlStore) DeleteAfterDeleteComment(ctx context.Context, commentId int) error {\r\n\tdb := s.db\r\n\r\n\tif err := db.Table(commentlikemodel.CommentLikes{}.TableName()).\r\n\t\tWhere(\"comment_id = ?\", commentId).\r\n\t\tDelete(nil).Error; err != nil {\r\n\t\treturn common.ErrDB(err)\r\n\t}\r\n\treturn nil\r\n}\r\n\r\nfunc (s *sqlStore) DeleteCommentList(ctx context.Context, postId int) error {\r\n\tdb := s.db\r\n\tif err := db.Table(commentlikemodel.CommentLikes{}.TableName()).\r\n\t\tWhere(\"post_id = ?\", postId).\r\n\t\tDelete(nil).Error; err != nil {\r\n\t\treturn common.ErrDB(err)\r\n\t}\r\n\treturn nil\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/modules/commentlike/commentlikestorage/delete.go b/modules/commentlike/commentlikestorage/delete.go
--- a/modules/commentlike/commentlikestorage/delete.go	
+++ b/modules/commentlike/commentlikestorage/delete.go	
@@ -17,17 +17,6 @@
 	return nil
 }
 
-func (s *sqlStore) DeleteAfterDeleteComment(ctx context.Context, commentId int) error {
-	db := s.db
-
-	if err := db.Table(commentlikemodel.CommentLikes{}.TableName()).
-		Where("comment_id = ?", commentId).
-		Delete(nil).Error; err != nil {
-		return common.ErrDB(err)
-	}
-	return nil
-}
-
 func (s *sqlStore) DeleteCommentList(ctx context.Context, postId int) error {
 	db := s.db
 	if err := db.Table(commentlikemodel.CommentLikes{}.TableName()).
