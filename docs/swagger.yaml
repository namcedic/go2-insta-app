basePath: /v1
definitions:
  commentmodel.CommentCreate:
    properties:
      content:
        type: string
      created_at:
        type: string
      id:
        $ref: '#/definitions/common.UID'
      parent_id:
        type: integer
      post_id:
        type: integer
      status:
        type: integer
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  commentmodel.CommentCreateRequest:
    properties:
      comment_id:
        type: string
      content:
        type: string
      post_id:
        type: string
      user_id:
        type: integer
    type: object
  common.AppError:
    properties:
      error_key:
        type: string
      log:
        type: string
      message:
        type: string
      status_code:
        type: integer
    type: object
  common.Image:
    properties:
      cloud_name:
        type: string
      extension:
        type: string
      height:
        type: integer
      id:
        type: integer
      url:
        type: string
      width:
        type: integer
    type: object
  common.SimpleUser:
    properties:
      avatar:
        $ref: '#/definitions/common.Image'
      created_at:
        type: string
      first_name:
        type: string
      follower_count:
        type: integer
      following_count:
        type: integer
      id:
        $ref: '#/definitions/common.UID'
      last_name:
        type: string
      post_count:
        type: integer
      status:
        type: integer
      updated_at:
        type: string
    type: object
  common.UID:
    type: object
  common.successRes:
    properties:
      data: {}
      filter: {}
      paging: {}
    type: object
  postmodel.PostCreate:
    properties:
      caption:
        type: string
      created_at:
        type: string
      id:
        $ref: '#/definitions/common.UID'
      img:
        $ref: '#/definitions/common.Image'
      status:
        type: integer
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  postmodel.PostUpdate:
    properties:
      caption:
        type: string
      img:
        $ref: '#/definitions/common.Image'
    type: object
  tokenprovider.Token:
    properties:
      created:
        type: string
      expiry:
        type: integer
      token:
        type: string
    type: object
  usermodel.User:
    properties:
      avatar:
        $ref: '#/definitions/common.Image'
      created_at:
        type: string
      date_of_birth:
        type: string
      email:
        type: string
      first_name:
        type: string
      follower_count:
        type: integer
      following_count:
        type: integer
      id:
        $ref: '#/definitions/common.UID'
      last_name:
        type: string
      phone:
        type: string
      post_count:
        type: integer
      role:
        type: string
      status:
        type: integer
      updated_at:
        type: string
      user_name:
        type: string
    type: object
  usermodel.UserCreate:
    properties:
      avatar:
        $ref: '#/definitions/common.Image'
      created_at:
        type: string
      date_of_birth:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        $ref: '#/definitions/common.UID'
      last_name:
        type: string
      password:
        type: string
      phone:
        type: string
      role:
        type: string
      status:
        type: integer
      updated_at:
        type: string
      user_name:
        type: string
    type: object
  usermodel.UserLogin:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  usermodel.UserUpdate:
    properties:
      avatar:
        $ref: '#/definitions/common.Image'
      created_at:
        type: string
      date_of_birth:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        $ref: '#/definitions/common.UID'
      last_name:
        type: string
      password:
        type: string
      phone:
        type: string
      status:
        type: integer
      updated_at:
        type: string
      user_name:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a images social network.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Swagger Insta API
  version: "1.0"
paths:
  /comments/{id}/{post_id}:
    delete:
      consumes:
      - application/json
      description: Delete a comment by comment ID
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: id of the comment that user want to delete (encoded in uuid)
        in: path
        name: id
        required: true
        type: string
      - description: post_id of the comment that user want to delete (encoded in uuid)
        in: path
        name: post_id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.successRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.AppError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.AppError'
      summary: Delete a comment
      tags:
      - comments
  /comments/{id}/like:
    post:
      consumes:
      - application/json
      description: Create by comment ID
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: id of the comment that user want to like (encoded in uuid)
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.successRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.AppError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.AppError'
      summary: Create a commentlike
      tags:
      - comments
  /comments/{id}/unlike:
    delete:
      consumes:
      - application/json
      description: Delete by comment ID
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: id of the comment that user want to unlike (encoded in uuid)
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.successRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.AppError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.AppError'
      summary: Delete a commentlike
      tags:
      - comments
  /login:
    post:
      consumes:
      - application/json
      description: User login into account
      parameters:
      - description: account's information of user that want to log in
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/usermodel.UserLogin'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/tokenprovider.Token'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.AppError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.AppError'
      summary: Login
      tags:
      - users
  /posts:
    post:
      consumes:
      - application/json
      description: User creates new post
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: information of the post that user want to create
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/postmodel.PostCreate'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.successRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.AppError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.AppError'
      summary: CreatePost
      tags:
      - posts
  /posts/{id}:
    delete:
      consumes:
      - application/json
      description: Delete by post ID
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: id of the post that user want to delete (encoded in uuid)
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.successRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.AppError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.AppError'
      summary: Delete a post
      tags:
      - posts
    patch:
      consumes:
      - application/json
      description: User updates post
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: id of the post that user want to delete (encoded in uuid)
        in: path
        name: id
        required: true
        type: integer
      - description: information of the post that user want to edit
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/postmodel.PostUpdate'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.successRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.AppError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.AppError'
      summary: UpdatePost
      tags:
      - posts
  /posts/{id}/comment:
    post:
      consumes:
      - application/json
      description: Create by post ID
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: id of the post that user want to comment (encoded in uuid)
        in: path
        name: id
        required: true
        type: string
      - description: content of comment
        in: body
        name: content
        required: true
        schema:
          $ref: '#/definitions/commentmodel.CommentCreate'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.successRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.AppError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.AppError'
      summary: Create a comment
      tags:
      - posts
  /posts/{id}/comments:
    get:
      consumes:
      - application/json
      description: Get all comment in a post
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: id of the post that user want to see all comments (encoded in
          uuid)
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.successRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.AppError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.AppError'
      summary: Get all comment
      tags:
      - posts
  /posts/{id}/like:
    post:
      consumes:
      - application/json
      description: Create by post ID
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: id of the post that user want to like (encoded in uuid)
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.successRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.AppError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.AppError'
      summary: Create a postlike
      tags:
      - posts
  /posts/{id}/unlike:
    delete:
      consumes:
      - application/json
      description: Delete by post ID
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: id of the post that user want to unlike (encoded in uuid)
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.successRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.AppError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.AppError'
      summary: Delete a postlike
      tags:
      - posts
  /posts/comments/replies:
    post:
      consumes:
      - application/json
      description: User creates a reply
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: user reply comment
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/commentmodel.CommentCreateRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.successRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.AppError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.AppError'
      summary: CreateReply
      tags:
      - posts
  /posts/explore:
    get:
      consumes:
      - application/json
      description: Get all post
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.successRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.AppError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.AppError'
      summary: Get all post
      tags:
      - posts
  /posts/explore/{id}:
    get:
      consumes:
      - application/json
      description: Get a post by id
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: id of post that user want to see (encoded in uuid)
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.successRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.AppError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.AppError'
      summary: Get a post
      tags:
      - posts
  /posts/explore/following:
    get:
      consumes:
      - application/json
      description: Get all posts of following
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.successRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.AppError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.AppError'
      summary: Get all posts of following
      tags:
      - posts
  /posts/searches:
    post:
      consumes:
      - multipart/form-data
      description: Get posts by searching
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - in: formData
        name: caption
        type: string
      - in: formData
        name: from
        type: string
      - in: formData
        name: search_name
        type: string
      - in: formData
        name: to
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.successRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.AppError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.AppError'
      summary: Search posts
      tags:
      - posts
  /register:
    post:
      consumes:
      - application/json
      description: User create new account
      parameters:
      - description: information of user that need to create an account
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/usermodel.UserCreate'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.successRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.AppError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.AppError'
      summary: Register
      tags:
      - users
  /users:
    patch:
      consumes:
      - application/json
      description: Users update their own account information
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: information that user want to update
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/usermodel.UserUpdate'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.successRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.AppError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.AppError'
      summary: UpdateProfile
      tags:
      - users
  /users/{id}/follow:
    post:
      consumes:
      - application/json
      description: User follow another user
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: user id of other user that current user want to follow (encoded
          to uuid)
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.successRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.AppError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.AppError'
      summary: UserFollowUser
      tags:
      - users
  /users/{id}/unfollow:
    delete:
      consumes:
      - application/json
      description: User unfollow another user
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: user id of other user that current user want to unfollow (encoded
          to uuid)
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.successRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.AppError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.AppError'
      summary: UserUnfollowUser
      tags:
      - users
  /users/follower:
    get:
      consumes:
      - application/json
      description: List follower of current user
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: username, lastname or firstname of other user that current user
          want to search in list follower
        in: query
        name: name
        type: string
      - description: limit records return in one page
        in: query
        name: limit
        type: string
      - description: used for paging purpose
        in: query
        name: cursor
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/common.SimpleUser'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.AppError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.AppError'
      summary: ListFollower
      tags:
      - users
  /users/following:
    get:
      consumes:
      - application/json
      description: List following of current user
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: username, lastname or firstname of other user that current user
          want to search in list following
        in: query
        name: name
        type: string
      - description: limit records return in one page
        in: query
        name: limit
        type: string
      - description: used for paging purpose
        in: query
        name: cursor
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/common.SimpleUser'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.AppError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.AppError'
      summary: ListFollowing
      tags:
      - users
  /users/profile:
    get:
      consumes:
      - application/json
      description: Get profile of current user
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/usermodel.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.AppError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.AppError'
      summary: GetProfile
      tags:
      - users
  /users/profile/{id}:
    get:
      consumes:
      - application/json
      description: Get profile of another user by id
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: user id of other user that current user want to see profile (encoded
          to uuid)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.SimpleUser'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.AppError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.AppError'
      summary: GetOtherProfile
      tags:
      - users
  /users/search/{searchKey}:
    get:
      consumes:
      - application/json
      description: Search other user by username, first name or last name
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: username, lastname or firstname of other user that current user
          want to search
        in: path
        name: searchKey
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/common.SimpleUser'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.AppError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.AppError'
      summary: SearchUserByName
      tags:
      - users
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
